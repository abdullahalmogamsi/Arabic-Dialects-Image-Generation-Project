# -*- coding: utf-8 -*-
"""Final_Stable_Diffussion_Image_Generation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ksxpLW7T6fI2_3ad3Is4EzMgDYGJo31t

#  **Image_Generation with Stable Diffussion Model**

## **Load the Stable Diffusion model**
"""

from google.colab import userdata
HF_Token = userdata.get('HF_Token')

# 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
!huggingface-cli login --token $HF_Token

!pip install -U bitsandbytes

from diffusers import BitsAndBytesConfig, SD3Transformer2DModel
from diffusers import StableDiffusion3Pipeline
import torch

model_id = "stabilityai/stable-diffusion-3.5-medium"

nf4_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=torch.bfloat16
)
model_nf4 = SD3Transformer2DModel.from_pretrained(
    model_id,
    subfolder="transformer",
    quantization_config=nf4_config,
    torch_dtype=torch.bfloat16
)

pipeline = StableDiffusion3Pipeline.from_pretrained(
    model_id,
    transformer=model_nf4,
    torch_dtype=torch.bfloat16
)
#pipeline.enable_model_cpu_offload()

#prompt = "A whimsical and creative image depicting a hybrid creature that is a mix of a waffle and a hippopotamus, basking in a river of melted butter amidst a breakfast-themed landscape. It features the distinctive, bulky body shape of a hippo. However, instead of the usual grey skin, the creature's body resembles a golden-brown, crispy waffle fresh off the griddle. The skin is textured with the familiar grid pattern of a waffle, each square filled with a glistening sheen of syrup. The environment combines the natural habitat of a hippo with elements of a breakfast table setting, a river of warm, melted butter, with oversized utensils or plates peeking out from the lush, pancake-like foliage in the background, a towering pepper mill standing in for a tree.  As the sun rises in this fantastical world, it casts a warm, buttery glow over the scene. The creature, content in its butter river, lets out a yawn. Nearby, a flock of birds take flight"
"""
image = pipeline(
    prompt=prompt,
    num_inference_steps=40,
    guidance_scale=4.5,
    max_sequence_length=512,
).images[0]
image.save("whimsical.png")
"""

pipeline.to("cuda")

prompt = "a girl wearing red jacket"

image = pipeline(prompt, num_inference_steps=25).images[0]
image.save("girl.png")

"""### **Getting the Data**"""

#connect to drive

from google.colab import drive
drive.mount('/content/drive')

import os

def count_files_in_folders(root_folder):

  folder_counts = {}
  for foldername, subfolders, filenames in os.walk(root_folder):
    folder_counts[foldername] = len(filenames)
  return folder_counts

# Example usage:
root_folder = "/content/drive/MyDrive/Final V Project 283/Stable Diffusion Generated Images‏"
file_counts = count_files_in_folders(root_folder)

for folder, count in file_counts.items():
    print(f"Folder: {folder}, Number of files: {count}")

!unzip "/content/drive/MyDrive/Final V Project 283/Text_transformer_dialects_data/transformer_dialects_data.zip"



"""## **Generating images Function and data**"""

import pandas as pd
#model 3 English
df_egyptian_model_3 = pd.read_csv('egyptian_data_transformed_model_3.csv')
df_khaleji_model_3 = pd.read_csv('khaleji_data_transformed_model_3.csv')
df_saudi_model_3 = pd.read_csv('saudi_data_transformed_model_3.csv')
df_morrocon_model_3 = pd.read_csv('morrocon_data_transformed_model_3.csv')

# model Gemini English
df_egyptian_model_4_eng = pd.read_csv('/content/drive/MyDrive/Final V Project 283/Text_transformer_dialects_data/Gemini to English data/egyptain_english_gemini.csv')
df_khaleji_model_4_eng = pd.read_csv('/content/drive/MyDrive/Final V Project 283/Text_transformer_dialects_data/Gemini to English data/khaleji_english_gemini.csv')
df_saudi_model_4_eng = pd.read_csv('/content/drive/MyDrive/Final V Project 283/Text_transformer_dialects_data/Gemini to English data/saudi_arabia_english_gemini.csv')
df_morrocon_model_4_eng = pd.read_csv('/content/drive/MyDrive/Final V Project 283/Text_transformer_dialects_data/Gemini to English data/moroccan_english_gemini.csv')

# check data shape
print("df_egyptian_model_3 shape:", df_egyptian_model_3.shape)
print("df_khaleji_model_3 shape:", df_khaleji_model_3.shape)
print("df_saudi_model_3 shape:", df_saudi_model_3.shape)
print("df_morrocon_model_3 shape:", df_morrocon_model_3.shape)

print("df_egyptian_model_4_eng shape:", df_egyptian_model_4_eng.shape)
print("df_khaleji_model_4_eng shape:", df_khaleji_model_4_eng.shape)
print("df_saudi_model_4_eng shape:", df_saudi_model_4_eng.shape)
print("df_morrocon_model_4_eng shape:", df_morrocon_model_4_eng.shape)

df_morrocon_model_4_eng.head()

import os
from PIL import Image
def generate_images(captions,images_values,output_dir,df_name):
    os.makedirs(output_dir, exist_ok=True)
    count=0
    for i, caption in enumerate(captions):
          image_name = image_values[i][:-4] + df_name
          count+=1
          if os.path.exists(os.path.join(output_dir, image_name)):
              print(f"Image '{image_name}' already exists. Skipping generation.")
              continue

          image = pipeline(caption, num_inference_steps=25).images[0]
          image.save(os.path.join(output_dir, image_name))
    print("number of generated images: ",count)

image_values=df_egyptian_model_3['Image_ID'].tolist()

"""## **Egyptain Images Generation**

### **Egyptain transformation Model 3**
"""

egyptian_model3_captions = df_egyptian_model_3['transformed_text'].tolist()

len(egyptian_model3_captions)

egyptian_model3_captions = df_egyptian_model_3['transformed_text'].tolist()
output_dir = "/content/drive/MyDrive/Final V Project 283/Stable Diffusion Generated Images‏/Egyptain Dialect Generated images/generated_egyptain_images_model3"
generate_images(egyptian_model3_captions,image_values, output_dir,"gen_egy_3.jpg")

"""### **Egyptain transformation Model 4 Gemini English**

"""

egyptian_model4_captions = df_egyptian_model_4_eng['transformed_text'].tolist()

len(egyptian_model4_captions)

output_dir = "/content/drive/MyDrive/Final V Project 283/Stable Diffusion Generated Images‏/Egyptain Dialect Generated images/generated_egyptain_english_gemini_images"
generate_images(egyptian_model4_captions,image_values, output_dir,"gen_egy_4_eng.jpg")

"""## **Moroccan Images Generation**

### **Moroccan transformation Model 3**
"""

morrocon_model3_captions = df_morrocon_model_3['transformed_text'].tolist()

len(morrocon_model3_captions)

import os

def count_files(directory):
  return len([name for name in os.listdir(directory) if os.path.isfile(os.path.join(directory, name))])

directory_path = "/content/drive/MyDrive/Final V Project 283/Stable Diffusion Generated Images‏/morrocon_generated_images/generated_morrocon_images_model3"
num_files = count_files(directory_path)
print(f"Number of files in '{directory_path}': {num_files}")

output_dir = "/content/drive/MyDrive/Final V Project 283/Stable Diffusion Generated Images‏/morrocon_generated_images/generated_morrocon_images_model3"
generate_images(morrocon_model3_captions,image_values, output_dir,"gen_mor_3.jpg")

"""### **Moroccan transformation Model 4 Gemini eng**"""

morrocon_model4_captions = df_morrocon_model_4_eng['transformed_text'].tolist()

len(morrocon_model4_captions)

output_dir = "/content/drive/MyDrive/Final V Project 283/Stable Diffusion Generated Images‏/morrocon_generated_images/generated_morrocon_images_model4_eng"
generate_images(morrocon_model4_captions,image_values, output_dir,"gen_mor_4_eng.jpg")

"""## **Khaleji Images Generation**

### Khaleji transformation Model 3
"""

khaleeji_model3_captions = df_khaleji_model_3['transformed_text'].tolist()

len(khaleeji_model3_captions)

output_dir = "/content/drive/MyDrive/Final V Project 283/Stable Diffusion Generated Images‏/khaleeji_generated_images/generated_khaleeji_images_model3"
generate_images(khaleeji_model3_captions, image_values, output_dir, "gen_kha_3.jpg")



"""### Khaleji transformation Model 4 Gemini English

"""

khaleeji_model4_captions = df_khaleji_model_4_eng['transformed_text'].tolist()

output_dir = "/content/drive/MyDrive/arabic dialects project faisal/Stable Diffusion Generated Images/khaleeji_generated_images/generated_khaleeji_images_model4_eng"
generate_images(khaleeji_model4_captions, image_values, output_dir, "gen_kha_4_eng.jpg")

"""## **Saudi arabia images generation**

###saudi arabia model 3
"""

saudi_model3_captions = df_saudi_model_3['transformed_text'].tolist()

len(saudi_model3_captions)

output_dir = "/content/drive/MyDrive/Final V Project 283/Stable Diffusion Generated Images‏/saudi_generated_images/generated_saudi_images_model3"
generate_images(saudi_model3_captions, image_values, output_dir, "gen_kha_saudi_3.jpg")



"""###saudi arabia model 4 Gemini English"""

saudi_model4_captions = df_saudi_model_4_eng['transformed_text'].tolist()

len(saudi_model4_captions)

output_dir = "/content/drive/MyDrive/arabic dialects project faisal/Stable Diffusion Generated Images/saudi_generated_images/generated_saudi_images_model4_eng"
generate_images(saudi_model4_captions, image_values, output_dir, "gen_kha_saudi_4_eng.jpg")

